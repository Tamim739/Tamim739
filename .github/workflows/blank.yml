# This is a basic workflow to help you get started with Actions
class Book:
    def __init__(self, title, author, genre):
        self.title = title
        self.author = author
        self.genre = genre
        self.borrower = None

    def borrow_book(self, borrower):
        if self.borrower is None:
            self.borrower = borrower
            return f"{self.title} has been borrowed by {borrower}."
        else:
            return f"{self.title} is already borrowed by {self.borrower}."

    def return_book(self):
        if self.borrower is not None:
            borrower = self.borrower
            self.borrower = None
            return f"{self.title} has been returned by {borrower}."
        else:
            return f"{self.title} is not currently borrowed."

class Library:
    def __init__(self):
        self.books = []

    def add_book(self, book):
        self.books.append(book)

    def remove_book(self, title):
        for book in self.books:
            if book.title == title:
                self.books.remove(book)
                return f"{title} removed successfully."
        return f"Book with title {title} not found."

    def search_book(self, title):
        for book in self.books:
            if book.title == title:
                return book
        return None

    def display_books(self):
        if not self.books:
            return "No books in the library."
        else:
            result = ""
            for book in self.books:
                if book.borrower is not None:
                    result += f"Title: {book.title}, Author: {book.author}, Genre: {book.genre}, Borrower: {book.borrower}\n"
                else:
                    result += f"Title: {book.title}, Author: {book.author}, Genre: {book.genre}, Status: Available\n"
            return result.strip()

# Usage example
library = Library()

book1 = Book("The Great Gatsby", "F. Scott Fitzgerald", "Fiction")
book2 = Book("To Kill a Mockingbird", "Harper Lee", "Fiction")
book3 = Book("1984", "George Orwell", "Dystopian")

library.add_book(book1)
library.add_book(book2)
library.add_book(book3)

print(library.display_books())

print(book1.borrow_book("Alice"))
print(book2.borrow_book("Bob"))
print(book1.borrow_book("Carol"))

print(library.display_books())

print(book1.return_book())

print(library.display_books())
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
